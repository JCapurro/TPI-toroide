        -:    0:Source:/cygdrive/c/Users/Juan/Desktop/TPI-toroide/auxiliares.cpp
        -:    0:Graph:/cygdrive/c/Users/Juan/Desktop/TPI-toroide/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcno
        -:    0:Data:/cygdrive/c/Users/Juan/Desktop/TPI-toroide/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    1:#include "definiciones.h"
        -:    2:#include "auxiliares.h"
        -:    3:#include "ejercicios.h"
        -:    4:
        -:    5:/******************************/
        -:    6:/** Autores:                 **/
        -:    7:/**  *Juan Capurro           **/
        -:    8:/**  *Humberto Carlos Sanchez**/
        -:    9:/******************************/
        -:   10:using namespace std;
        -:   11:// aqui se pueden ubicar todas las funciones auxiliares de soporte para la resolucion de los ejercicios
       15:   12:pair<int,int> mp(int a, int b) {
       15:   13:    return make_pair(a, b);
       15:   13-block  0
        -:   14:}
        -:   15://No pueden usar esta función para resolver el TPI.
        -:   16://Tampoco pueden usar iteradores, como usa esta función.
        6:   17:vector<posicion> ordenar(vector<posicion> &v) {
        6:   18:    sort(v.begin(), v.end());
        6:   18-block  0
        6:   19:    return v;
        -:   20:}
        -:   21:
        -:   22:
        5:   23:bool esRectangulo(toroide t,int ncol,int nfil){
        5:   24:    int resp=true;
       19:   25:    for(int i=0;i<nfil;i++){
        5:   25-block  0
       19:   25-block  1
       14:   26:        resp&=t[i].size()==ncol;
       14:   26-block  0
        -:   27:    }
        5:   28:    return resp;
        5:   28-block  0
        -:   29:}
        -:   30:
   252024:   31:int modulo(int a, int b){
   252024:   32:    int r = a % b;
   252024:   33:    return r < 0 ? r + b : r;
   252024:   33-block  0
    13281:   33-block  1
   238743:   33-block  2
   252024:   33-block  3
        -:   34:}
        -:   35:
        -:   36:
    13325:   37:int vecinosVivos( toroide t,int f, int c){
    13325:   38:    int vecinosVivos = 0;
    53300:   39:    for(int i =-1; i <=1;i++) {
    13325:   39-block  0
    53300:   39-block  1
    39975:   39-block  2
   159900:   40:        for(int j=-1;j<=1;j++){
    39975:   40-block  0
   159900:   40-block  1
   119925:   40-block  2
   119925:   41:            if(vivaToroide(f+i,c+j,t)&&(i!=0||j!=0)){
   119925:   41-block  0
   119925:   41-block  1
   119925:   41-block  2
    19212:   41-block  3
     6962:   41-block  4
    16394:   41-block  5
   103531:   41-block  6
   119925:   41-block  7
   119925:   41-block  8
   119925:   41-block  9
    $$$$$:   41-block 10
    $$$$$:   41-block 11
    16394:   42:                vecinosVivos+=1;
    16394:   42-block  0
        -:   43:            }
        -:   44:        }
        -:   45:    }
    13325:   46:    return vecinosVivos;
    13325:   46-block  0
    13325:   46-block  1
        -:   47:}
        -:   48:
        -:   49:
   119925:   50:bool vivaToroide(int f,int c,toroide t){
   119925:   51:    return t[modulo(f,t.size())][modulo(c,t[0].size())];
   119925:   51-block  0
        -:   52:}
        -:   53:
        -:   54:
       57:   55:float cantidadVivas(toroide t){
       57:   56:    float vivas = 0;
      289:   57:    for (int i=0; i <t.size(); i++){
       57:   57-block  0
      289:   57-block  1
      232:   57-block  2
     1209:   58:        for (int j=0; j<t[i].size(); j++){
      232:   58-block  0
     1209:   58-block  1
      977:   58-block  2
      977:   59:            if(t[i][j]){
      977:   59-block  0
      113:   60:                vivas += 1;
      113:   60-block  0
        -:   61:            }
        -:   62:        }
        -:   63:    }
       57:   64:    return vivas;
       57:   64-block  0
        -:   65:}
        -:   66:
        -:   67:
        5:   68:float superficieTotal(toroide t){
        5:   69:    return t.size() * t[0].size();
        5:   69-block  0
        -:   70:}
        -:   71:
        -:   72:
    24118:   73:bool estaViva(toroide t, int f, int c){
    24118:   74:    return enRangoToroide(f,c,t) && t[f][c];
    24118:   74-block  0
    24118:   74-block  1
    24118:   74-block  2
     3142:   74-block  3
    20976:   74-block  4
    24118:   74-block  5
    24118:   74-block  6
    24118:   74-block  7
    24118:   74-block  8
    $$$$$:   74-block  9
    $$$$$:   74-block 10
    $$$$$:   74-block 11
        -:   75:}
        -:   76:
        -:   77:
    24118:   78:bool enRangoToroide(int f, int c, toroide t){
   24118*:   79:    return (0<=f && f<t.size()) && (0<=c && c<t[0].size());
    24118:   79-block  0
    24118:   79-block  1
    24118:   79-block  2
    24118:   79-block  3
    24118:   79-block  4
    %%%%%:   79-block  5
    24118:   79-block  6
        -:   80:}
        -:   81:
        -:   82:
    12059:   83:bool debeVivir(toroide t, int f, int c){
    12059:   84:    bool reproduccion=!estaViva(t,f,c) && vecinosVivos(t,f,c)==3;
    12059:   84-block  0
    12059:   84-block  1
    12059:   84-block  2
    10488:   84-block  3
    10488:   84-block  4
    10488:   84-block  5
      428:   84-block  6
    11631:   84-block  7
    12059:   84-block  8
    10488:   84-block  9
    12059:   84-block 10
    12059:   84-block 11
    $$$$$:   84-block 12
    $$$$$:   84-block 13
    $$$$$:   84-block 14
    $$$$$:   84-block 15
    $$$$$:   84-block 16
    $$$$$:   84-block 17
    12059:   85:    bool sobrevive=estaViva(t,f,c) && vecinosVivos(t,f,c)>=2 && vecinosVivos(t,f,c)<=3;
    12059:   85-block  0
    12059:   85-block  1
    12059:   85-block  2
     1571:   85-block  3
     1571:   85-block  4
     1571:   85-block  5
     1232:   85-block  6
     1232:   85-block  7
     1232:   85-block  8
      897:   85-block  9
    11162:   85-block 10
    12059:   85-block 11
     1232:   85-block 12
    12059:   85-block 13
     1571:   85-block 14
    12059:   85-block 15
    12059:   85-block 16
    $$$$$:   85-block 17
    $$$$$:   85-block 18
    $$$$$:   85-block 19
    $$$$$:   85-block 20
    $$$$$:   85-block 21
    $$$$$:   85-block 22
    $$$$$:   85-block 23
    $$$$$:   85-block 24
    12059:   86:    return reproduccion||sobrevive;
    12059:   86-block  0
    11631:   86-block  1
     1325:   86-block  2
    10734:   86-block  3
    12059:   86-block  4
    12059:   86-block  5
        -:   87:}
        -:   88:
       20:   89:int cantidadAMorir(toroide t){
       20:   90:    int ticks=0;
       20:   90-block  0
       52:   91:    while(cantidadVivas(t) != 0){
       52:   91-block  0
       52:   91-block  1
    $$$$$:   91-block  2
       32:   92:        evolucionToroide(t);
       32:   92-block  0
       32:   93:        ticks++;
        -:   94:    }
       20:   95:    return ticks;
       20:   95-block  0
       20:   95-block  1
        -:   96:}
        -:   97:
        3:   98:toroide interseccionVivas(toroide t1,toroide t2){
       12:   99:    for(int i = 0; i < t1.size(); i++){
        3:   99-block  0
       12:   99-block  1
        9:   99-block  2
       36:  100:        for(int j = 0;j < t1[i].size(); j++){
        9:  100-block  0
       36:  100-block  1
       27:  101:            t2[i][j]=t1[i][j]&&t2[i][j];
       27:  101-block  0
       10:  101-block  1
        3:  101-block  2
       24:  101-block  3
       27:  101-block  4
        -:  102:        }
        -:  103:    }
        3:  104:    return t2;
        3:  104-block  0
        -:  105:}
        -:  106:
       16:  107:int cotaMaximoPeriodo(toroide t,toroide u) {
        -:  108:    int pt;
        -:  109:    int pu;
       16:  110:    esPeriodico(t, pt);
       16:  110-block  0
       16:  111:    esPeriodico(u, pu);
       16:  111-block  0
       16:  112:    if (pu > pt)
       16:  112-block  0
       12:  113:        return pu;
       12:  113-block  0
        -:  114:    else
        4:  115:        return pt;
        4:  115-block  0
        -:  116:}
        -:  117:
        -:  118:/**********/
        -:  119:
      284:  120:toroide traslacion(toroide const &t,int i,int j){
      284:  121:    toroide tf=t;
      284:  121-block  0
     1599:  122:    for(int k=0;k<t.size();k++){
     1599:  122-block  0
     1315:  122-block  1
     7402:  123:        for(int m=0;m<t[k].size();m++){
     1315:  123-block  0
     7402:  123-block  1
     6087:  124:            tf[k][m]=t[modulo(k+i,t.size())][modulo(m+j,t[k].size())];
     6087:  124-block  0
        -:  125:        }
        -:  126:    }
      284:  127:    return tf;
      284:  127-block  0
        -:  128:}
        -:  129:
        -:  130:
      259:  131:int menorSuperficieRec(toroide t) {
      518:  132:    vector<posicion> vivas=posicionesVivas(t);
      259:  132-block  0
    $$$$$:  132-block  1
      259:  133:    posicion esquinaSupIzq=minimoSubRecQueCubreLosVivos(vivas)[0];//esquina superior izq. de minimo sub-rectangulo.
      259:  133-block  0
      259:  133-block  1
      259:  133-block  2
    $$$$$:  133-block  3
    $$$$$:  133-block  4
      259:  134:    posicion esquinaInfDer=minimoSubRecQueCubreLosVivos(vivas)[1];//esquina inferior der. de minimo sub-rectangulo.
      259:  134-block  0
      259:  134-block  1
    $$$$$:  134-block  2
    $$$$$:  134-block  3
      518:  135:    return calcularAreaRec(esquinaSupIzq,esquinaInfDer);
      259:  135-block  0
        -:  136:}
        -:  137:
      518:  138:vector<posicion> minimoSubRecQueCubreLosVivos(vector<posicion> vivas) {
      518:  139:    int minimaFila = vivas[vivas.size() - 1].first;;
      518:  139-block  0
      518:  140:    int minimaCol = vivas[vivas.size() - 1].second;
      518:  141:    int maximaFila = 0;
      518:  142:    int maximaCol = 0;
        -:  143:
     4312:  144:    for (int i = 0; i < vivas.size(); i++) {
     4312:  144-block  0
     3794:  144-block  1
     3794:  145:        if (minimaFila > vivas[i].first) {
     3794:  145-block  0
      436:  146:            minimaFila = vivas[i].first;
      436:  146-block  0
        -:  147:        }
     3794:  148:        if (minimaCol > vivas[i].second) {
     3794:  148-block  0
      428:  149:            minimaCol = vivas[i].second;
      428:  149-block  0
        -:  150:        }
     3794:  151:        if (maximaFila < vivas[i].first) {
     3794:  151-block  0
     1136:  152:            maximaFila = vivas[i].first;
     1136:  152-block  0
        -:  153:        }
     3794:  154:        if (maximaCol < vivas[i].second) {
     3794:  154-block  0
     1046:  155:            maximaCol = vivas[i].second;
     1046:  155-block  0
        -:  156:        }
        -:  157:    }
      518:  158:    posicion esquinaSupIzq = make_pair(minimaFila, minimaCol);//esquina superior izquierda de rectangulo
      518:  158-block  0
      518:  159:    posicion esquinaInfDer = make_pair(maximaFila, maximaCol);//esquina inferior derecha de rectangulo
      518:  159-block  0
        -:  160:
      518:  161:    return {esquinaSupIzq, esquinaInfDer};
      518:  161-block  0
      518:  161-block  1
      518:  161-block  2
    $$$$$:  161-block  3
    $$$$$:  161-block  4
    $$$$$:  161-block  5
        -:  162:}
        -:  163:
        -:  164:
        -:  165:
      259:  166:int calcularAreaRec(posicion esquinaSupIzq,posicion esquinaInfDer){
      259:  167:    int altura = esquinaInfDer.first - esquinaSupIzq.first +1;
      259:  168:    int base = esquinaInfDer.second - esquinaSupIzq.second +1;
      259:  169:    return base * altura;
      259:  169-block  0
        -:  170:}
